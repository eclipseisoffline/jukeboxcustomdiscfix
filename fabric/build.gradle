import java.nio.file.Files

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.fabric_archives_base_name
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

sourceSets.main {
    java.srcDir project(":common").sourceSets.main.java
    resources.srcDir project(":common").sourceSets.main.resources
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:${project.parchment_mappings}")
    }

    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "supported_versions", project.supported_versions
    inputs.property "fabric_loader_version", project.fabric_loader_version
    inputs.property "quilt_loader_version", project.quilt_loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "supported_versions": project.supported_versions,
                "fabric_loader_version": project.fabric_loader_version
    }
    filesMatching("quilt.mod.json") {
        expand "version": project.version,
                "group": project.group,
                "supported_versions": project.supported_versions,
                "quilt_loader_version": project.quilt_loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/eclipseisoffline/jukeboxcustomdiscfix")
            credentials {
                username = "eclipseisoffline"
                password = Files.readString(java.nio.file.Path.of(project.rootDir.path + "/github_auth"))
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            artifactId project.archivesBaseName

            from components.java
        }
    }
}
