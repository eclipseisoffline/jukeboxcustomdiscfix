import java.nio.file.Files

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.120'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.neoforge_archives_base_name
}

repositories {
    mavenLocal()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    server {
        programArgument '--nogui'
    }
}

sourceSets.main {
    java.srcDir project(":common").sourceSets.main.java
    resources.srcDir project(":common").sourceSets.main.resources
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neoforge_version}"
}

tasks.withType(ProcessResources).configureEach {
    inputs.property "version", project.version
    inputs.property "neoforge_supported_versions", project.neoforge_supported_versions
    inputs.property "neoforge_loader_version", project.neoforge_loader_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "neoforge_supported_versions": project.neoforge_supported_versions,
                "neoforge_loader_version": project.neoforge_loader_version
    }
}

publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/eclipseisoffline/jukeboxcustomdiscfix")
            credentials {
                username = "eclipseisoffline"
                password = Files.readString(java.nio.file.Path.of(project.rootDir.path + "/github_auth"))
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            artifactId project.archivesBaseName

            from components.java
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}